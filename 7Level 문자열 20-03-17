#include <iostream>
#include <string>

using namespace std;

int main()
{
	int cnt = 0;
	string str;
	getline(cin, str);
	for (int i = 1; i < str.size(); i++)
	{
		if (str[i] == ' ')
			cnt++;		
	}
	if (str.back() == ' ')
		cout << cnt;
	else
		cout << (cnt + 1);
	return 0;
}
//string헤더파일의 getline(cin, 입력할 문자열) : cin>>은 공백을 인식하지 못하는데 공백을 인식하게 하기 위해 사용
//string헤더파일의 문자열.back() : 문자열의 맨 마지막 문자 반환
---------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>

using namespace std;

int main()
{
	int a, b, num1[3], num2[3];
	cin >> a >> b;
	for (int i = 0; i < 3; i++)
	{
		num1[i] = a % 10;
		num2[i] = b % 10;

		a /= 10;
		b /= 10;
	}
	a = num1[0] * 100 + num1[1] * 10 + num1[2];
	b = num2[0] * 100 + num2[1] * 10 + num2[2];

	if (a > b)
		cout << a;
	else
		cout << b;
	
	return 0;
}
--------------------------------------------------------------------------------------------------
#include <iostream>
#include <string>

using namespace std;

int main()
{
	int sec, sum = 0;
	string str;
	cin >> str;

	for (int i = 0; i < str.size(); i++)
	{
		if (str[i] == 'A' || str[i] == 'B' || str[i] == 'C')
			sec = 3;
		else if (str[i] == 'D' || str[i] == 'E' || str[i] == 'F')
			sec = 4;
		else if (str[i] == 'G' || str[i] == 'H' || str[i] == 'I')
			sec = 5;
		else if (str[i] == 'J' || str[i] == 'K' || str[i] == 'L')
			sec = 6;
		else if (str[i] == 'M' || str[i] == 'N' || str[i] == 'O')
			sec = 7;
		else if (str[i] == 'P' || str[i] == 'Q' || str[i] == 'R' || str[i] == 'S')
			sec = 8;
		else if (str[i] == 'T' || str[i] == 'U' || str[i] == 'V')
			sec = 9;
		else if (str[i] == 'W' || str[i] == 'X' || str[i] == 'Y' || str[i] == 'Z')
			sec = 10;

		sum += sec;
	}
	cout << sum;
	return 0;
}
//처음의 내코드는 이렇게 작성하였다. 하지만 너무 효율적이지 못하다고 생각해서 다른사람의 코드는 어떻게 작성하였나 보았다.
//그결과 아래와 같이 나왔다.
#include <iostream>
#include <string>

using namespace std;

int main()
{
	int sec, sum = 0;
	string str;
	cin >> str;

	for (int i = 0; i < str.size(); i++)
	{
		sec = (str[i] - 'A') / 3 + 3;
		if (str[i] == 'S' || str[i] == 'V' || str[i] == 'Y' || str[i] == 'Z')
			sec--;
		sum += sec;
	}
	cout << sum;
	return 0;
}
//훨씬 간단하게 나왔다. 알파벳이 거의 3개씩 나눠지고 다이얼 1이 2초가 걸리니 하나씩 증가할 때 마다 1초가 증가하느 총 3초를 증가 시켜주었다.
//S,V,Y,Z는 3개씩 나누었을 때 1칸씩 뒤로 밀려 원래와 달리 +1초가 되었기 때문에 1초를 빼주면 된다.
